// Generated by CoffeeScript 1.6.3
(function() {
  var BatchImporter, BatchImporterTransfer, async, genericPool, mysql,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  mysql = require('mysql');

  genericPool = require('generic-pool');

  BatchImporterTransfer = require('./BatchTransfer');

  BatchImporter = (function(_super) {
    __extends(BatchImporter, _super);

    function BatchImporter() {
      BatchImporter.__super__.constructor.apply(this, arguments);
      this.connections = {};
      this.waitingTransfers = [];
      this.runningTransfers = [];
      this.showTransferProgress = false;
    }

    BatchImporter.prototype._getConnectionType = function(connectionType) {
      var e;
      try {
        return require('./connections/' + connectionType);
      } catch (_error) {
        e = _error;
        throw new Error('type ' + connectionType + ' not supported');
      }
    };

    BatchImporter.prototype.addConnection = function(name, type, settings) {
      var connectionType;
      connectionType = this._getConnectionType(type);
      return this.connections[name] = new connectionType(name, settings);
    };

    BatchImporter.prototype.removeConnection = function(name) {
      return delete this.connections[name];
    };

    BatchImporter.prototype.getConnection = function(name) {
      return this.connections[name];
    };

    BatchImporter.prototype.fetchData = function(source, sql, rowCallback, callback) {
      var results, sqls,
        _this = this;
      if (!callback) {
        callback = rowCallback;
        rowCallback = null;
      }
      sqls = sql.split(';').filter(function(value) {
        return value;
      });
      results = [];
      return async.forEach(sqls, function(query, cb) {
        return _this.connections[source].query(query, rowCallback, function(err, res) {
          if (err) {
            return cb(err);
          }
          results.push(res);
          return cb();
        });
      }, function(err) {
        if (results.length === 1) {
          results = results[0];
        }
        return callback(err, results);
      });
    };

    BatchImporter.prototype.transferData = function(source, destination, sql, rowCallback, callback) {
      var destinationConnection, tableName, transfer, _destination,
        _this = this;
      if (!callback) {
        callback = rowCallback;
        rowCallback = null;
      }
      _destination = destination.split('.');
      destinationConnection = this.getConnection(_destination[0]);
      tableName = _destination[1];
      if (destinationConnection.options.tablePrefix) {
        tableName = destinationConnection.options.tablePrefix + tableName;
      }
      transfer = new BatchImporterTransfer(this.getConnection(source), destinationConnection, tableName, sql, rowCallback, function(err) {
        return callback(err);
      });
      transfer.logProgress = this.logTransferProgress;
      return transfer.start();
    };

    BatchImporter.prototype.closeConnections = function() {
      var connection, key, _ref, _results;
      _ref = this.connections;
      _results = [];
      for (key in _ref) {
        connection = _ref[key];
        _results.push(connection.close());
      }
      return _results;
    };

    BatchImporter.prototype.stats = function() {
      var stats, transfer, _i, _len, _ref;
      stats = {
        transfers: {
          waiting: this.waitingTransfers.length,
          running: {
            count: this.runningTransfers.length,
            stats: []
          }
        }
      };
      _ref = this.runningTransfers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        transfer = _ref[_i];
        stats.transfers.running.stats.push(transfer.stats());
      }
      return stats;
    };

    return BatchImporter;

  })(Object);

  module.exports = BatchImporter;

}).call(this);
