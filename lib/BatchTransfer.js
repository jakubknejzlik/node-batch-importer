// Generated by CoffeeScript 1.6.3
(function() {
  var BatchImporterTransfer, async,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  BatchImporterTransfer = (function(_super) {
    __extends(BatchImporterTransfer, _super);

    function BatchImporterTransfer(sourceConnection, destinationConnection, destinationTable, sql, rowCallback, callback) {
      var _this = this;
      this.sourceConnection = sourceConnection;
      this.destinationConnection = destinationConnection;
      this.destinationTable = destinationTable;
      this.sql = sql;
      this.rowCallback = rowCallback;
      this.callback = callback;
      BatchImporterTransfer.__super__.constructor.apply(this, arguments);
      this.logProgress = false;
      this.err = null;
      this.rows = 0;
      this.queueItemsCount = 0;
      this.queue = async.queue(function(sql, callback) {
        _this.sql = sql;
        _this.printProgress();
        return _this.destinationConnection.query(_this.sql, null, function(err, res) {
          if (err) {
            _this.err = err;
          }
          return callback();
        });
      }, 5);
    }

    BatchImporterTransfer.prototype.start = function() {
      var _this = this;
      this.sourceConnection.query(this.sql, (function(row) {
        if (_this.rowCallback) {
          _this.rowCallback(row);
        }
        return _this.rows++;
      }), (function(err, data, columns, last) {
        var end;
        _this.printProgress();
        if (err) {
          return _this.callback(err);
        }
        if (data.length > 0) {
          _this.queue.push(_this.destinationConnection.createSQL(columns, data, _this.destinationTable));
          _this.queueItemsCount++;
        }
        if (last) {
          end = function() {
            _this.callback(_this.err);
          };
          if (_this.queue.length() > 0) {
            _this.queue.drain = end;
          } else {
            end();
          }
        }
      }), 1000);
    };

    BatchImporterTransfer.prototype.printProgress = function() {
      var stats;
      if (this.logProgress) {
        stats = this.stats();
        process.stdout.write("\r" + this.sourceConnection.name + "->" + this.destinationConnection.name + "." + this.destinationTable + "(rows " + stats.numberOfRows + "; queue " + stats.queue.processed + "/" + stats.queue.count + ")");
      }
    };

    BatchImporterTransfer.prototype.stats = function() {
      return {
        numberOfRows: this.rows,
        queue: {
          count: this.queueItemsCount,
          processed: this.queueItemsCount - this.queue.length()
        }
      };
    };

    return BatchImporterTransfer;

  })(Object);

  module.exports = BatchImporterTransfer;

}).call(this);
