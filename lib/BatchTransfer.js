// Generated by CoffeeScript 1.10.0
(function() {
  var BatchImporterTransfer, SQL_RERTY_COUNT, async,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  async = require('async');

  SQL_RERTY_COUNT = 5;

  BatchImporterTransfer = (function(superClass) {
    extend(BatchImporterTransfer, superClass);

    function BatchImporterTransfer(sourceConnection, destinationConnection, destinationTable, sql1, rowCallback, callback1) {
      this.sourceConnection = sourceConnection;
      this.destinationConnection = destinationConnection;
      this.destinationTable = destinationTable;
      this.sql = sql1;
      this.rowCallback = rowCallback;
      this.callback = callback1;
      BatchImporterTransfer.__super__.constructor.apply(this, arguments);
      this.logProgress = false;
      this.err = null;
      this.rows = 0;
      this.queueItemsCount = 0;
      this.queue = async.queue((function(_this) {
        return function(sql, callback) {
          _this.printProgress();
          return _this.destinationConnection.query(sql.query, null, function(err, res) {
            if (err && (!sql.retryCount || sql.retryCount < SQL_RERTY_COUNT)) {
              sql.retryCount = (sql.retryCount || 0) + 1;
              console.log('error:', err.message, 'retrying:', sql.retryCount);
              _this.queue.push(sql);
            } else {
              if (err) {
                _this.err = err;
              }
            }
            return callback();
          });
        };
      })(this), 1);
    }

    BatchImporterTransfer.prototype.start = function() {
      this.sourceConnection.query(this.sql, ((function(_this) {
        return function(row) {
          if (_this.rowCallback) {
            _this.rowCallback(row);
          }
          return _this.rows++;
        };
      })(this)), ((function(_this) {
        return function(err, data, columns, last) {
          var end;
          _this.printProgress();
          if (err) {
            return _this.callback(err);
          }
          if (data.length > 0) {
            _this.queue.push({
              query: _this.destinationConnection.createSQL(columns, data, _this.destinationTable)
            });
            _this.queueItemsCount++;
          }
          if (last) {
            end = function() {
              _this.callback(_this.err);
            };
            if (_this.queue.length() > 0) {
              _this.queue.drain = end;
            } else {
              end();
            }
          }
        };
      })(this)), 1000);
    };

    BatchImporterTransfer.prototype.printProgress = function() {
      var stats;
      if (this.logProgress) {
        stats = this.stats();
        process.stdout.write("\r" + this.sourceConnection.name + "->" + this.destinationConnection.name + "." + this.destinationTable + "(rows " + stats.numberOfRows + "; queue " + stats.queue.processed + "/" + stats.queue.count + ")");
      }
    };

    BatchImporterTransfer.prototype.stats = function() {
      return {
        numberOfRows: this.rows,
        queue: {
          count: this.queueItemsCount,
          processed: this.queueItemsCount - this.queue.length()
        }
      };
    };

    return BatchImporterTransfer;

  })(Object);

  module.exports = BatchImporterTransfer;

}).call(this);
