// Generated by CoffeeScript 1.10.0
(function() {
  var MySQLConnection, genericPool, mysql,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  genericPool = require('generic-pool');

  mysql = require('mysql');

  MySQLConnection = (function(superClass) {
    extend(MySQLConnection, superClass);

    function MySQLConnection(name, options) {
      this.name = name;
      this.options = options;
      MySQLConnection.__super__.constructor.apply(this, arguments);
      this.pool = genericPool.Pool({
        name: this.name,
        max: 1,
        create: (function(_this) {
          return function(callback) {
            var conn;
            conn = mysql.createConnection(_this.options);
            return callback(null, conn);
          };
        })(this),
        destroy: (function(_this) {
          return function(connection) {
            return connection.destroy();
          };
        })(this)
      });
    }

    MySQLConnection.prototype.query = function(sql, rowCallback, callback, batchSize) {
      return this.pool.acquire((function(_this) {
        return function(err, connection) {
          var columns, data, error, query, rows;
          if (err) {
            return callback(err);
          }
          data = [];
          columns = [];
          rows = 0;
          error = null;
          query = connection.query(sql);
          return query.on("error", function(err) {
            return error = err;
          }).on("fields", function(fields) {
            var field, j, len, results;
            results = [];
            for (j = 0, len = fields.length; j < len; j++) {
              field = fields[j];
              results.push(columns.push(field.name));
            }
            return results;
          }).on("result", function(row) {
            var _row, column, j, len;
            rows++;
            _row = [];
            if (rowCallback) {
              rowCallback(row);
            }
            for (j = 0, len = columns.length; j < len; j++) {
              column = columns[j];
              _row.push(row[column]);
            }
            data.push(_row);
            if (batchSize && data.length >= batchSize) {
              callback(null, data, columns, false);
              return data = [];
            }
          }).on("end", function() {
            callback(error, data, columns, true);
            return _this.pool.release(connection);
          });
        };
      })(this));
    };

    MySQLConnection.prototype.createSQL = function(columns, rows, table) {
      var column, i, ii, keys, sql;
      keys = [];
      for (i in columns) {
        column = columns[i];
        keys.push(column + " = VALUES(" + column + ")");
      }
      sql = "INSERT INTO `" + table + "` (" + columns.join(",") + ") VALUES ";
      for (i in rows) {
        for (ii in rows[i]) {
          if (rows[i][ii] && rows[i][ii].substring && rows[i][ii].substring(0, 2) === "`(") {
            rows[i][ii] = rows[i][ii].replace(/^`\(/g, "(").replace(/\)`$/g, ")");
          } else {

          }
          rows[i][ii] = mysql.escape(rows[i][ii]);
        }
        rows[i] = rows[i].join(",");
      }
      sql += "(" + rows.join("),(") + ")";
      sql += " ON DUPLICATE KEY UPDATE " + keys.join(",");
      return sql;
    };

    MySQLConnection.prototype.close = function() {
      return this.pool.drain((function(_this) {
        return function() {
          _this.pool.destroyAllNow();
        };
      })(this));
    };

    return MySQLConnection;

  })(Object);

  module.exports = MySQLConnection;

}).call(this);
